/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

'use strict';
import React, { Component } from 'react';
import { Container, Header, CheckBox,List,Badge,
Radio,ListItem,Item, Button,Tabs,Tab, Title,Input, 
Content, Footer, FooterTab,  Left, Right, Body, Icon ,
Switch,Fab,} from 'native-base';
import Svg,{
    Circle,
    Ellipse,
    G,
    LinearGradient,
    RadialGradient,
    Line,
    Path,
    Polygon,
    Polyline,
    Rect,
    Symbol,
    Text as svgText,
    Use,
    Defs,
    Stop
} from 'react-native-svg';
import {
  AppRegistry,
  StyleSheet,
  Text,
  ListView,
  TextInput ,
  View,
  Button as LButton,
  Alert,
  Image,
  TouchableOpacity,
  TouchableHighlight,
  ScrollView,
} from 'react-native';

import Dialog from 'react-native-dialog';
var SplashScreen = require('@remobile/react-native-splashscreen');
				
var PushNotification = require('react-native-push-notification');
PushNotification.configure({

    // (optional) Called when Token is generated (iOS and Android)
    onRegister: function(token) {
        console.log( 'TOKEN:', token );
    },

    // (required) Called when a remote or local notification is opened or received
    onNotification: function(notification) {
        console.log( 'NOTIFICATION:', notification );
    },

    // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications) 
    senderID: "YOUR GCM SENDER ID",

    // IOS ONLY (optional): default: all - Permissions to register.
    permissions: {
        alert: true,
        badge: true,
        sound: true
    },

    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
      * (optional) default: true
      * - Specified if permissions (ios) and token (android and ios) will requested or not,
      * - if not, you must call PushNotificationsHandler.requestPermissions() later
      */
    requestPermissions: true,
});


const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 20,
    backgroundColor: '#f7f7f7',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
   dayCircleFiller: {
      backgroundColor: 'blue',
    },
});
const onButtonPress = () => {
	 PushNotification.localNotification({
		/* Android Only Properties */
		id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
		ticker: "My Notification Ticker", // (optional)
		autoCancel: true, // (optional) default: true
		largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
		smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
		bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
		subText: "This is a subText", // (optional) default: none
		color: "red", // (optional) default: system default
		vibrate: true, // (optional) default: true
		vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
		tag: 'some_tag', // (optional) add tag to message
		group: "group", // (optional) add group to message
		ongoing: false, // (optional) set whether this is an "ongoing" notification

	
		/* iOS and Android properties */
		title: "My Notification Title", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
		message: "My Notification Message", // (required)
		playSound: false, // (optional) default: true
		soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
		number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
		repeatType: 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
		actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
	});
}; 
 const onButtonPress2 = () => {
	Dialog.prompt("填写资料", null, [{
            text: '确定',
            onPress: (value) => {
               
            },
        }], undefined); 
 };
 



export default class reactApp extends Component {
	constructor(props) {
        super(props);      
    };
	componentDidMount() {
        SplashScreen.hide();
    };
	
    render() {
		
		var doms = [];
		for (var i = 0; i < 240; i++) {
		  doms.push(<ListItem><Text>Simon Mignolet----- + {i} </Text></ListItem>);
		}
        return (
            <Container>
                <Header searchBar rounded>
                    <Item success>
                        <Icon name="search" />
                        <Input placeholder="Search" />
                    </Item>
                    <Button danger  style={{width:60,height:40,marginLeft:2,}} >
                        <Text>查询</Text>
                    </Button>
                </Header>
				<Content>
                   <LButton
					  onPress={onButtonPress2}
					  title="Press Me"
					  accessibilityLabel="See an informative alert"
					/>
					
					{doms}
					
					
				</Content>
                <Footer>
                   <FooterTab>
                        <Button>                            
                            <Text>Apps</Text>
                            <Icon name='ios-apps-outline' />
                        </Button>
                        <Button  badgeValue="2">
                            <Text >Camera</Text>
                            <Icon name='ios-camera-outline' />
                        </Button>
                        <Button active>
                            <Text>Navigate</Text>
                            <Icon name='ios-compass' />
                        </Button>
                        <Button>
                            <Text>Contact</Text>
                            <Icon name='ios-contact-outline' />
                        </Button>
                    </FooterTab>
                </Footer>
            </Container>
        );
    }
}


AppRegistry.registerComponent('reactApp', () => reactApp);
